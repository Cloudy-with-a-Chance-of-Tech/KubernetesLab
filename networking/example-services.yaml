# Example services demonstrating environment-based IP pool segmentation
# These examples show how to use labels to control which IP pool a service uses

# Example 1: Production service - gets IP from 192.168.100.96-127
---
apiVersion: v1
kind: Service
metadata:
  name: webapp-production
  namespace: production
  labels:
    environment: production  # This selects the production IP pool
    app.kubernetes.io/name: webapp
    app.kubernetes.io/component: web
    app.kubernetes.io/instance: production
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: https
    port: 443
    targetPort: 8443
    protocol: TCP
  selector:
    app.kubernetes.io/name: webapp
    app.kubernetes.io/instance: production

# Example 2: Development service - gets IP from 192.168.100.128-159
---
apiVersion: v1
kind: Service
metadata:
  name: webapp-development
  namespace: development
  labels:
    environment: development  # This selects the development IP pool
    app.kubernetes.io/name: webapp
    app.kubernetes.io/component: web
    app.kubernetes.io/instance: development
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  selector:
    app.kubernetes.io/name: webapp
    app.kubernetes.io/instance: development

# Example 3: Staging service - gets IP from 192.168.100.160-191
---
apiVersion: v1
kind: Service
metadata:
  name: api-staging
  namespace: staging
  labels:
    environment: staging  # This selects the staging IP pool
    app.kubernetes.io/name: api
    app.kubernetes.io/component: api
    app.kubernetes.io/instance: staging
spec:
  type: LoadBalancer
  ports:
  - name: https
    port: 443
    targetPort: 8443
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app.kubernetes.io/name: api
    app.kubernetes.io/instance: staging

# Example 4: Shared infrastructure service - gets IP from 192.168.100.192-223
---
apiVersion: v1
kind: Service
metadata:
  name: monitoring-grafana
  namespace: shared
  labels:
    environment: shared  # This selects the shared services IP pool
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: visualization
    app.kubernetes.io/part-of: monitoring
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: 3000
    protocol: TCP
  selector:
    app.kubernetes.io/name: grafana

# Example 5: Legacy service (no environment label) - gets IP from legacy pool
---
apiVersion: v1
kind: Service
metadata:
  name: legacy-app
  namespace: default
  labels:
    app.kubernetes.io/name: legacy-app
    # Note: No environment label - will use legacy pool (backward compatibility)
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  selector:
    app.kubernetes.io/name: legacy-app
