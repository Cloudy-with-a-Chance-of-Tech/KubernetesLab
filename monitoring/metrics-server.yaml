# Metrics Server for Kubernetes cluster resource monitoring
# Security-hardened configuration for Talos Linux
# 
# SECURITY CONSIDERATIONS:
# - Uses --kubelet-insecure-tls due to Talos Linux kubelet certificate limitations
# - Runs with minimal privileges (non-root, read-only filesystem)
# - Resource limits prevent resource exhaustion attacks
# - Seccomp profile restricts system calls
# - Capabilities dropped to minimum required
# - Network policies should be applied for additional segmentation
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: metrics-server
  namespace: kube-system
  labels:
    k8s-app: metrics-server
    app.kubernetes.io/name: metrics-server
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: monitoring-stack
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:aggregated-metrics-reader
  labels:
    k8s-app: metrics-server
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-view: "true"
    app.kubernetes.io/name: metrics-server
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: monitoring-stack
rules:
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:metrics-server
  labels:
    k8s-app: metrics-server
    app.kubernetes.io/name: metrics-server
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: monitoring-stack
rules:
- apiGroups: [""]
  resources: ["nodes/metrics"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["pods", "nodes"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: metrics-server-auth-reader
  namespace: kube-system
  labels:
    k8s-app: metrics-server
    app.kubernetes.io/name: metrics-server
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: monitoring-stack
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: metrics-server:system:auth-delegator
  labels:
    k8s-app: metrics-server
    app.kubernetes.io/name: metrics-server
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: monitoring-stack
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:metrics-server
  labels:
    k8s-app: metrics-server
    app.kubernetes.io/name: metrics-server
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: monitoring-stack
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:metrics-server
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
apiVersion: v1
kind: Service
metadata:
  name: metrics-server
  namespace: kube-system
  labels:
    k8s-app: metrics-server
    app.kubernetes.io/name: metrics-server
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: monitoring-stack
spec:
  selector:
    k8s-app: metrics-server
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: https
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metrics-server
  namespace: kube-system
  labels:
    k8s-app: metrics-server
    app.kubernetes.io/name: metrics-server
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: monitoring-stack
spec:
  selector:
    matchLabels:
      k8s-app: metrics-server
  strategy:
    rollingUpdate:
      maxUnavailable: 0
  template:
    metadata:
      labels:
        k8s-app: metrics-server
        app.kubernetes.io/name: metrics-server
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/part-of: monitoring-stack
    spec:
      serviceAccountName: metrics-server
      priorityClassName: system-cluster-critical
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534  # nobody user
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      automountServiceAccountToken: true  # Required for API access
      volumes:
      - name: tmp-dir
        emptyDir:
          sizeLimit: 100Mi  # Limit tmp directory size
      containers:
      - name: metrics-server
        image: registry.k8s.io/metrics-server/metrics-server:v0.7.2
        imagePullPolicy: Always
        args:
          - --cert-dir=/tmp
          - --secure-port=10250
          - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
          - --kubelet-use-node-status-port
          - --metric-resolution=15s
          - --kubelet-insecure-tls  # SECURITY NOTE: Required for Talos Linux kubelet certs
          - --requestheader-client-ca-file=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          - --requestheader-allowed-names=aggregator
          - --requestheader-extra-headers-prefix=X-Remote-Extra-
          - --requestheader-group-headers=X-Remote-Group
          - --requestheader-username-headers=X-Remote-User
          - --tls-cert-file=/tmp/tls.crt
          - --tls-private-key-file=/tmp/tls.key
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
            ephemeral-storage: 25Gi
          limits:
            cpu: 500m
            memory: 500Mi
            ephemeral-storage: 35Gi
        ports:
        - name: https
          containerPort: 10250
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: https
            scheme: HTTPS
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /livez
            port: https
            scheme: HTTPS
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534  # nobody user
          runAsGroup: 65534
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - name: tmp-dir
          mountPath: /tmp
---
apiVersion: v1
kind: Service
metadata:
  name: metrics-server-api
  namespace: kube-system
  labels:
    k8s-app: metrics-server
    app.kubernetes.io/name: metrics-server
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: monitoring-stack
spec:
  selector:
    k8s-app: metrics-server
  ports:
  - name: https
    port: 443
    targetPort: https
  type: ClusterIP
---
# APIService registration for metrics.k8s.io/v1beta1
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1beta1.metrics.k8s.io
  labels:
    k8s-app: metrics-server
    app.kubernetes.io/name: metrics-server
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: monitoring-stack
spec:
  service:
    name: metrics-server
    namespace: kube-system
  group: metrics.k8s.io
  version: v1beta1
  insecureSkipTLSVerify: true
  groupPriorityMinimum: 100
  versionPriority: 100
---
# Network Policy for metrics-server security
# Restricts network traffic to only necessary communications
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: metrics-server-netpol
  namespace: kube-system
  labels:
    k8s-app: metrics-server
    app.kubernetes.io/name: metrics-server
    app.kubernetes.io/component: security
    app.kubernetes.io/part-of: monitoring-stack
spec:
  podSelector:
    matchLabels:
      k8s-app: metrics-server
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow API server to access metrics-server
  - from: []  # API server can come from any namespace
    ports:
    - protocol: TCP
      port: 10250
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow access to kubelet metrics on all nodes
  - to: []
    ports:
    - protocol: TCP
      port: 10250
    - protocol: TCP
      port: 10255  # Read-only kubelet port
  # Allow access to Kubernetes API
  - to: []
    ports:
    - protocol: TCP
      port: 6443
    - protocol: TCP
      port: 443
---
# PodDisruptionBudget for metrics-server high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: metrics-server-pdb
  namespace: kube-system
  labels:
    k8s-app: metrics-server
    app.kubernetes.io/name: metrics-server
    app.kubernetes.io/component: availability
    app.kubernetes.io/part-of: monitoring-stack
spec:
  minAvailable: 1
  selector:
    matchLabels:
      k8s-app: metrics-server
